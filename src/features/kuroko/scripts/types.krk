class Vector:
    def __init__(self, x=0.0, y=0.0, z=0.0):
        self.x = float(x)
        self.y = float(y)
        self.z = float(z)

    def __repr__(self):
        return f"Vector({self.x}, {self.y}, {self.z})"


class QAngle(Vector):
    def __repr__(self):
        return f"QAngle({self.x}, {self.y}, {self.z})"


class VMatrix:
    def __init__(self, *values):
        if not values:
            self.data = [0.0] * 16
        elif len(values) == 16:
            self.data = [float(v) for v in values]
        else:
            raise ValueError("VMatrix must be initialized with 0 or 16 floats.")

    def __repr__(self):
        let rows = [
            self.data[i : i + 4] for i in range(0, 16, 4)
        ]
        let row_strings = ",\n  ".join(
            f"[{row[0]}, {row[1]}, {row[2]}, {row[3]}]"
            for row in rows
        )
        return f"VMatrix(\n  {row_strings}\n)"
